/* eslint-disable no-console */
const { join, resolve } = require ('path')
const { execSync } = require('child_process')
module.exports = Object.assign(list_versions, {
  flags: [ '--info', '--markdown', '--all', '--npm-list', '--npm-tree', '--no-colors'],
  shortcuts: [ '-i', '-m','-a', '-ls', '-ll' ],
  info,
  help: `
# SYNOPSIS

    *cds version* <options>
    *cds -v* <option>

    Prints the versions of all @sap/cds packages in your package dependencies.

# OPTIONS

    *-i  | --info*

      Prints version information in a tabular markdown format, which you
      can embed into your bug reports.

    *-a  | --all*

      Also lists sub-packages and optional dependencies.

    *-ls | --npm-list* <pattern>
    *-ll | --npm-tree* <pattern>

      Prints an npm ls tree filtered to the specified pattern.
      (default: '@sap/cds')

`})

const MISSING = '-- missing --'

function list_versions(args, options) { //NOSONAR
  if (options['npm-list'] || options['npm-tree']) {
    let [pattern] = args, re = pattern ? RegExp(pattern) : /@sap\/cd[rs]|@sap\/eslint-plugin-cds/
    let cmd = 'npm ls --depth ' + (options['npm-tree'] ? 11 : 0)
    console.log (cmd,'| grep', pattern)
    return require('child_process').exec(cmd, (e,stdout)=>{
      // if (e) console.error(e)
      const replacement = (options['no-colors'] ? '$1 $2$3$4' : '\x1b[91m$1 \x1b[32m$2\x1b[0m\x1b[2m$3\x1b[32m$4\x1b[0m');
      for (let line of stdout.split(/\n/)) if (line.match(re)) console.log(
        line.replace(/(@sap[^@]*)@([\S]+)( -> [\S]+)?(deduped)?/,replacement)
      )
    })
  }
  const versions = info ()
  if (options.markdown)  return _markdown (versions)
  if (options.info)  return _markdown (versions)
  const mark = options['no-colors'] ? s => s : require('../lib/util/term').info
  for (let each of Object.keys(versions).sort())  console.log(`${mark(each)}: ${versions[each]}`)
}

function info() {
  const cwd = process.cwd()
  const npmRoot = execSync('npm root -g').toString().trim()
  return {
    ..._versions_from(_pkg_path('@sap/cds-dk', __dirname), '@sap/cds-dk (global)'), // ... linked in cap/dev setup
    ..._versions_from(_pkg_path('@sap/cds-dk', npmRoot),   '@sap/cds-dk (global)'), // ... or installed globally
    ..._versions_from(_pkg_path('@sap/cds-dk', cwd)),    // local dk, important for Java projects
    ..._versions_from(_pkg_path('@sap/cds', __dirname)), // @sap/cds from here
    ..._versions_from(cwd),                              // ... or from local app dependencies
    ..._versions_from(_pkg_path('@sap/cds-compiler', cwd, __dirname)), // compiler is no direct dependency, so list it explicitly
    'Node.js': process.version,
    'home': require('../lib/cds').home // effective (local) cds
  }
}

function _versions_from(pkg_path, pkg_label) {
  let pkg; try { pkg = require(join(pkg_path, 'package.json')) } catch { return {} }
  let versions = {}
  if (pkg.name)  versions[pkg_label || pkg.name] = pkg.version

  const deps = { ...pkg.dependencies, ...pkg.devDependencies }
  for (let dep in deps) {
    if (!dep.match(/@sap\/.*cds.*/) && !dep.startsWith('@cap-js/'))  continue
    try {
      const dep_path = require.resolve(join(dep, 'package.json'), {paths:[pkg_path]})
      const dep_pkg = require(dep_path)
      versions[dep_pkg.name] = dep_pkg.version
    } catch (e) {
      if (e.code !== 'MODULE_NOT_FOUND')  console.error(e)
     }
  }
  return versions
}

function _markdown (versions) {
  console.log()
  const pkg = { name:'', repository:'', version:'' }; try {
    Object.assign (pkg, require (resolve('package.json')))
  } catch (e) {/* ignored */}
  console.log ('|', pkg.name, '|', pkg.repository.url || pkg.repository, '|')
  console.log ('|:---------------------- | ----------- |')
  if (require('../lib').env['project-nature'] === 'nodejs') {
    console.log ('|', v('Node.js'), '|')
    console.log ('|', v('@sap/cds'), '|')
  } else {
    console.log ('|', v('CAP Java Runtime'), '|')
  }
  console.log ('|', v('@sap/cds-compiler'), '|')
  console.log ('|', v('@sap/cds-dk'), '|')
  console.log ('|', v('@sap/cds-dk (global)'), '|')
  console.log ('|', v('@sap/eslint-plugin-cds'), '|')
  console.log ('|', v('@sap/cds-mtxs'), '|')
  function v (component) {
    const version = versions [component] || MISSING
    return (component + '               ').slice(0,22)
    +' | '+ (version  + '           ').slice(0,11)
  }
  console.log()
}

function _pkg_path(id, ...paths) {
  try {
    const pk_path = require.resolve(join(id, 'package.json'), { paths })
    return resolve(pk_path, '..')
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND')  throw e
  }
}
