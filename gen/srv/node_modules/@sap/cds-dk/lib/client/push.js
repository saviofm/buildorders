const cds = require ('../cds'), { local } = cds.utils;
const { join } = require('path');
const { readFileSync, existsSync } = require('fs');
const axios = require('axios');

const { login } = require('./auth_manager');
const BaseCommand = require('./base_command');
const { CliError } = require('./helper/errors');
const { schemaRegex } = require('./helper/url_helper');
const buildSystem = require('../build')

module.exports = class Push extends BaseCommand {

    static async run(paramValues, pushOptions = {}) {
        const params = await login(paramValues);
        const projectFolder = params.get('projectFolder');
        const extensionName = this.getExtensionName(projectFolder);

        if (!('extArchive' in pushOptions)) {
            console.log(`Building project`);
            await buildSystem.build();
        }

        const { src, content } = await this.readSource(params, pushOptions);
        const url = params.get('appUrl');
        const subdomain = params.get('subdomain');
        const target = Object.assign({ url }, subdomain && { subdomain });

        console.log(`\nPushing extension '${extensionName}' from`, { src }, 'to', target);
        await this.pushTgz(params, content, extensionName);
        console.log ('Activation succeeded.\n')
    }

    static async readSource(params, pushOptions) {
        let src = pushOptions?.extArchive ?? join(params.get('projectFolder'), 'gen/extension.tgz');
        let content;
        if (existsSync(src)) {
            content = readFileSync(src, { encoding: 'base64' });
            src = local(src);
        } else {
            if (!schemaRegex.test(src)) {
                throw new CliError(`Nonexistent path: ${src}`, { command: 'push' });
            }
            try {
                content = (await axios.get(src, { responseEncoding: 'base64' })).data;
            } catch (error) {
                this.handleHttpError(error, params, { url: src });
            }
        }
        return { src, content };
    }

    static getExtensionName(projectFolder) {
        try {
            return require(join(projectFolder, 'package.json')).name;
        } catch (error) {
            throw new CliError(`Extension project at ${projectFolder} is missing package.json file`, { error, command: 'push' });
        }
    }

    static async pushTgz(params, tgz, extensionName) {
        const pushUrl = `${params.get('appUrl')}/-/cds/extensibility/push`;
        const options = { ...params.get('reqAuth') };

        return axios.post(pushUrl, {
            extension: tgz,
            tag: extensionName
        }, options)
            .catch(error => this.handleHttpError(error, params, { url: pushUrl }));
    }
}
