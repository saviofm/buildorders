const path = require('path');
const util = require('util');

const HDI_DEPLOY_LIB = '@sap/hdi-deploy';

class HdiDeployUtil {

    async deploy(dbDir, vcapEnv = {}, options = {}) {
        console.log(`Deploying to HANA from ${dbDir}`);

        const hdiDeployLib = await this._loadHdiDeployLib(dbDir);

        let deployerEnv = JSON.parse(JSON.stringify(process.env));
        const hdiDeployOptions = deployerEnv.HDI_DEPLOY_OPTIONS ? JSON.parse(deployerEnv.HDI_DEPLOY_OPTIONS) : {};
        delete hdiDeployOptions.root;

        if (typeof hdiDeployLib.clean_env === 'function') {
            deployerEnv = hdiDeployLib.clean_env(deployerEnv);
        }

        if (vcapEnv.VCAP_SERVICES) {
            deployerEnv.VCAP_SERVICES = JSON.stringify(vcapEnv.VCAP_SERVICES);
        }
        if (vcapEnv.SERVICE_REPLACEMENTS) {
            deployerEnv.SERVICE_REPLACEMENTS = JSON.stringify(vcapEnv.SERVICE_REPLACEMENTS);
        }
        if (vcapEnv.TARGET_CONTAINER) {
            deployerEnv.TARGET_CONTAINER = vcapEnv.TARGET_CONTAINER;
        }

        if (options.autoUndeploy) {
            console.log(`Hdi deployer automatically undeploys deleted resources using --auto-undeploy.`);
            hdiDeployOptions.auto_undeploy = true;
        }

        if (Object.entries(hdiDeployOptions).length > 0) {
            deployerEnv.HDI_DEPLOY_OPTIONS = JSON.stringify(hdiDeployOptions);
        }

        const asyncDeploy = util.promisify(hdiDeployLib.deploy);
        const response = await asyncDeploy(dbDir, deployerEnv);
        if (response?.exitCode) {
            let message = `HDI deployment failed with exit code ${response.exitCode}`;
            if (response.signal) {
                message += `. ${response.signal}`;
            }
            throw new Error(message);
        }
    }


    _loadHdiDeployLib(cwd) {
        const searchPaths = [cwd, __dirname];
        const libPath = require.resolve(path.join(HDI_DEPLOY_LIB, 'library'), { paths: searchPaths });
        if (!libPath) {
            throw new Error(`Required library '${HDI_DEPLOY_LIB}' not found in
    ${searchPaths.join('\n    ')}
Add it either as a devDependency using 'npm install -D ${HDI_DEPLOY_LIB}' or install it globally using 'npm install -g ${HDI_DEPLOY_LIB}'.`);
        }

        console.log(`Using HDI deployer from ${libPath}`)

        // let any error go through and abort deploy
        return require(libPath);
    }
}

module.exports = new HdiDeployUtil();
