// Registry of sequence matchers in mta.yaml files

const srvNode4 = path => ({
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'nodejs',
    }, {
        property: 'path',
        isEqualTo: path
    }],
})

const srvJava4 = path => ({
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'java'
    }, {
        property: 'path',
        isEqualTo: path
    }],
})

const approuter = {
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'approuter.nodejs'
    }]
}

const xsuaa = {
    in: 'resources',
    where: [{
        property: 'parameters.service',
        isEqualTo: 'xsuaa',
    }]
}

const destination = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'destination',
    }]
}

const connectivity = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'connectivity',
    }]
}

const auditlog = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'auditlog-api',
    }]
}

const redis = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'redis-cache',
    }]
}

const enterpriseMessaging = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'enterprise-messaging',
    }]
}

const kibana = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'application-logs',
    }, {
        property: 'parameters.service-plan',
        isEqualTo: 'lite',
    }]
}

const hdbDeployer = {
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: 'hdb'
    }]
}

const hdiContainer = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'com.sap.xs.hdi-container',
    }]
}

const serviceManager = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'service-manager',
    }, {
        property: 'parameters.service-plan',
        isEqualTo: 'container'
    }]
}

const saasRegistry = {
    in: 'resources',
    where: [{
        property: 'type',
        isEqualTo: 'org.cloudfoundry.managed-service',
    }, {
        property: 'parameters.service',
        isEqualTo: 'saas-registry',
    }]
}

const srvApi4 = srv => ({
    in: [srv, 'provides'],
    where: [{
        property: 'name',
        isEqualTo: 'srv-api'
    }, {
        property: 'properties.srv-url',
        isEqualTo: '${default-url}'
    }]
})

const mtxSidecar4 = path => ({
    in: 'modules',
    where: [{
        property: 'type',
        isEqualTo: `nodejs`
    }, {
        property: 'path',
        isEqualTo: path // 'gen/mtx/sidecar' REVISIT: Same build destination for Java/Node.js would simplify this a lot
    }]
})

const providedMtxApiSidecar4 = mtxSidecar => ({
    in: [mtxSidecar, 'provides'],
    where: [{
        property: 'name',
        isEqualTo: 'mtx-api'
    }, {
        property: 'properties.mtx-url',
        isEqualTo: '${default-url}'
    }]
})

const requiredMtxApi = {
    in: [approuter, 'requires'],
    where: [{
        property: 'properties.name',
        isEqualTo: 'mtx-api'
    }, {
        property: 'properties.url',
        isEqualTo: '~{mtx-url}'
    }]
}

const providedAppApi = {
    in: [approuter, 'provides'],
    where: [{
        property: 'name',
        isEqualTo: 'app-api'
    }, {
        property: 'properties.app-protocol',
        isEqualTo: '${protocol}'
    }, {
        property: 'properties.app-uri',
        isEqualTo: '${default-uri}'
    }],
}

const requiredAppApi4 = module => ({
    in: [module, 'requires'],
    where: [{
        property: 'name',
        isEqualTo: 'app-api'
    }, {
        property: 'properties.SUBSCRIPTION_URL',
        isEqualTo: '~{app-protocol}://\\${tenant_subdomain}-~{app-uri}'
    }]
})

const requiredMtxSidecarApi4 = srv => ({
    in: [srv, 'requires'],
    where: [{
        property: 'properties.CDS_MULTITENANCY_SIDECAR_URL',
        isEqualTo: '~{mtx-url}'
    }]
})

const providedJavaApprouterApi4 = srv => ({
    in: [srv, 'requires'],
    where: [{
        property: 'properties.CDS_MULTITENANCY_APPUI_URL',
        isEqualTo: '~{url}'
    }]
})

const providedJavaApprouterApi = {
    in: [approuter, 'requires'],
    where: [{
        property: 'properties.url',
        isEqualTo: '${default-url}'
    }]
}

const approuterExtensibility = {
    in: 'routes',
    where: [{
        property: 'source',
        isEqualTo: '^/-/cds/.*'
    }, {
        property: 'destination',
        isEqualTo: 'mtx-api',
    }, {
        property: 'authenticationType',
        isEqualTo: 'none',
    }]
}

module.exports = {
    srvNode4,
    srvJava4,
    approuter,
    xsuaa,
    auditlog,
    destination,
    connectivity,
    enterpriseMessaging,
    hdbDeployer,
    hdiContainer,
    serviceManager,
    saasRegistry,
    redis,
    srvApi4,
    mtxSidecar4,
    providedMtxApiSidecar4,
    requiredMtxApi,
    requiredMtxSidecarApi4,
    providedAppApi,
    requiredAppApi4,
    providedJavaApprouterApi4,
    providedJavaApprouterApi,
    kibana,
    approuterExtensibility
}
