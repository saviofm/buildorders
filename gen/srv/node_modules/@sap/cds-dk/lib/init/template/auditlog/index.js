const cds = require('../../../cds')
const { read } = cds.utils
const { join } = require('path')
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { parseMd5File, writeMd5File } = require('../../util/md5')
const { srvNode4, srvJava4, auditlog } = require('../_merging/registry-mta')

module.exports = class AuditlogTemplate extends require('../templateBase') {

    static hasFacet(env) {
        return env.requires?.['audit-log']
    }

    async run() {
        const project = await readProject(this.options)
        const { configFile } = project
        project.shortcut = !(await read(configFile)).cds?.requires?.['audit-log']?.kind
        await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), project)
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const project = await readProject(this.options)
        const { isNodejs, hasMta, hasHelm, srvPath } = project

        if (hasMta) {
            const srv = (isNodejs ? srvNode4 : srvJava4)(srvPath)
            await mergeYAML(
                'mta.yaml',
                join(__dirname, 'files', 'mta.yaml.hbs'),
                project,
                {
                    additions: [srv, auditlog],
                    relationships: [{
                        insert: [auditlog, 'name'],
                        into: [srv, 'requires', 'name']
                    }]
                }
            )
        }

        if (hasHelm) {
            //in case facet is being added to the already exisiting charts folder
            let isIndependentCommand = false
            if(Object.keys(context).length == 0){
                isIndependentCommand = true
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
            }

            await mergeYAML(
                join('chart', 'values.yaml'),
                {
                    srv: { bindings: {
                        auditlog: { serviceInstanceName: 'auditlog' }
                    }},
                    auditlog: {
                        serviceOfferingName: 'auditlog-api',
                        servicePlanName: 'default'
                    }
                }
            )

            // copy service instance chart if it is not present
            const HelmTemplate = require(`../helm`);
            const helmTemplate = new HelmTemplate(this.generator, context.oldTrackingData, context.newTrackingData);
            isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('service-instance');

            // add dependency entry in chart.yaml
            await helmTemplate.addDependency('service-instance', 'auditlog');

            if(isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
        }
    }
}
