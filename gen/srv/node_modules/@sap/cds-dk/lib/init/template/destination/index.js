const { join } = require('path')
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { srvJava4, srvNode4, destination } = require('../_merging/registry-mta')
const { parseMd5File, writeMd5File } = require('../../util/md5')

module.exports = class DestinationTemplate extends require('../templateBase') {

    static hasFacet(env) {
        const kinds = { odata: 1, 'odata-v2': 1, 'odata-v4': 1, rest: 1 }
        const mtxServices = { 'cds.xt.SaasProvisioningService': 1, 'cds.xt.DeploymentService': 1, 'cds.xt.ModelProviderService': 1, 'cds.xt.ExtensibilityService': 1 }
        const _fromMtx = service => service in mtxServices
        const hasDestination = Object.entries(env.requires).some(([service, require]) => !_fromMtx(service) && !kinds[service] && kinds[require.kind])
        return hasDestination || env.requires.destinations
    }

    async run() {
        const project = await readProject(this.options)
        const { configFile } = project
        await mergeJSON(configFile, join(__dirname, 'files', `package.json.hbs`), project)
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const project = await readProject(this.options)
        const { isJava, hasHelm, hasDestination, hasMta, srvPath, hasHtml5Repo } = project

        if (hasMta) {
            const srv = (isJava ? srvJava4 : srvNode4)(srvPath)
            const additions = [srv, destination]
            const relationships = [{
                insert: [destination, 'name'],
                into: [srv, 'requires', 'name']
            }]
            await mergeYAML('mta.yaml', join(__dirname, 'files', 'mta.yaml.hbs'), project, { additions, relationships })
        }

        if (hasHelm) {
            //const env = await this.getEnv()
            const binding = hasDestination && { srv: { bindings: { destination: { serviceInstanceName: 'destination' }}}}
            const html5Binding = hasHtml5Repo && { 'html5-apps-deployer': { bindings: { destination: { serviceInstanceName: 'destination' }}}}

            //in case facet is being added to the already exisiting charts folder
            let isIndependentCommand = false
            if(Object.keys(context).length == 0){
                isIndependentCommand = true
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
            }
            await mergeYAML(
                join('chart', 'values.yaml'),
                {
                    ...binding,
                    ...html5Binding,
                    destination: {
                        serviceOfferingName: 'destination',
                        servicePlanName: 'lite',
                        parameters: {
                            version: '1.0.0',
                            ...(hasHtml5Repo) && { HTML5Runtime_enabled: true }
                        }
                    }
                }
            )

            // copy service instance chart if it is not present
            const HelmTemplate = require(`../helm`);
            const helmTemplate = new HelmTemplate(this.generator, context.oldTrackingData, context.newTrackingData);
            isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('service-instance');

            // add dependency entry in chart.yaml
            await helmTemplate.addDependency('service-instance', 'destination');

            if(isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
        }
    }
}
