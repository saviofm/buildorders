const cds = require('../../../cds')
const { exists } = cds.utils
const { join } = require('path')
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML, sort } = require('../../util/merge')
const { XSUAA, KIBANA } = require('../../constants').OPTIONS
const {
    srvNode4, srvJava4, mtxSidecar4, approuter, // Modules
    xsuaa, // BTP Services
    requiredMtxApi, providedJavaApprouterApi4, providedJavaApprouterApi, // APIs
    requiredAppApi4, providedAppApi,
    approuterExtensibility // xs-app.json config
} = require('../_merging/registry-mta')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5')

module.exports = class ApprouterTemplate extends require('../templateBase') {

    static hasFacet(env) {
        return exists(join(env.folders.app, 'xs-app.json'))
    }

    getDependencies() {
        return [XSUAA]
    }

    getRelatedFacets() {
        return [KIBANA]
    }

    async run() {
        const { appPath = 'app' } = await readProject(this.options)
        const appPackageJSONPath = join(appPath, 'package.json')
        await mergeJSON(appPackageJSONPath, join(__dirname, 'files', 'package.json'))
        await sort(appPackageJSONPath, 'dependencies')
        await mergeJSON(join(appPath, 'default-env.json'), join(__dirname, 'files', 'default-env.json'))
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const project = await readProject(this.options)
        const { isNodejs, isJava, isExtensible, isMultitenant, hasMta, hasHelm, srvPath, appPath } = project

        if (hasMta) {
            const srv = (isNodejs ? srvNode4 : srvJava4)(srvPath)
            const apis = isJava ? [providedJavaApprouterApi4(srv), providedJavaApprouterApi] : []
            const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
            if (isNodejs && isMultitenant) apis.push(requiredMtxApi, requiredAppApi4(mtxSidecar), providedAppApi)
            if (isJava && isMultitenant) apis.push(requiredMtxApi)
            const modules = [srv, approuter]
            if (isMultitenant) modules.push(mtxSidecar)
            const additions = [...modules, xsuaa, ...apis]
            await mergeYAML('mta.yaml', join(__dirname, 'files', 'mta.yaml.hbs'), project, {
                additions,
                relationships: [{
                    insert: [xsuaa, 'name'],
                    into: [srv, 'requires', 'name']
                }, {
                    insert: [xsuaa, 'name'],
                    into: [approuter, 'requires', 'name']
                }],
            })
        }

        if (hasHelm) {
            let isIndependentCommand = false;
            if (Object.keys(context).length == 0) {
                isIndependentCommand = true;
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'));
            }

            await mergeYAML(
                join('chart', 'values.yaml'),
                join(__dirname, 'files', 'values.yaml.hbs'),
                project
            )

            // add dependency entry in chart.yaml
            const HelmTemplate = require(`../helm`);
            const helmTemplate = new HelmTemplate(this.generator, context.oldTrackingData, context.newTrackingData);
            await helmTemplate.addDependency('web-application', 'approuter');

            await mergeYAML(
                join('chart', 'values.yaml'),
                {
                  approuter: {
                    envFrom: [
                      {
                        configMapRef: {
                          name: "{{ .Release.Name }}-approuter-configmap"
                        }
                      }
                    ]
                  }
                },
                project
            )

            const fileName = isMultitenant ? 'approuter-mtxs-configmap.yaml' : 'approuter-configmap.yaml';

            await copyAndTrack(
                join(__dirname, 'files', fileName),
                join('chart', 'templates', 'approuter-configmap.yaml'),
                context,
                { force: true }
            )

            if(isMultitenant) {
                const mtxsConfigMapFileName = isNodejs ? 'mtxs-configmap-nodejs.yaml' : 'mtxs-configmap-java.yaml';
                await copyAndTrack(
                    join(__dirname, 'files', mtxsConfigMapFileName),
                    join('chart', 'templates', 'mtxs-configmap.yaml'),
                    context,
                    { force: true }
                )
            }

            if (isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData);
        }

        const xsAppPath = join(appPath, 'xs-app.json')
        const additions = isExtensible ? [{ ...approuterExtensibility, at: 0 }] : []
        await mergeJSON(xsAppPath, join(__dirname, 'files', 'xs-app.json.hbs'), project, { additions })
    }
}
