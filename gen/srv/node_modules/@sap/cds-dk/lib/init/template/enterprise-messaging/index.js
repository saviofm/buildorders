const YAML = require('@sap/cds-foss')('yaml')
const { join } = require('path')
const cds = require('../../../cds')
const { read } = cds.utils
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { parseMd5File, writeMd5File } = require('../../util/md5')
const { srvNode4, srvJava4, enterpriseMessaging } = require('../_merging/registry-mta')

module.exports = class EnterpriseMessagingTemplate extends require('../templateBase') {

  async canRun() {
    const { isJava } = await readProject(this.options)
    if (isJava) throw `'cds add enterprise-messaging' is not available for Java yet`
    return true
  }

  static hasFacet(env) {
    return env.requires?.messaging?.kind === 'enterprise-messaging-http'
  }

  async run() {
    const project = await readProject(this.options)
    const { configFile } = project
    await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), project)
    await this.runDependentMerging()
  }

  async runDependentMerging(context = {}) {
    const project = await readProject(this.options)
    const { hasXsuaa, hasHelm, hasMta, isNodejs, srvPath, appName } = project

    if (hasMta) {
      await mergeJSON('event-mesh.json', join(__dirname, 'files', 'event-mesh.json.hbs'), project)
      const srv = (isNodejs ? srvNode4 : srvJava4)(srvPath)
      await mergeYAML(
          'mta.yaml',
          join(__dirname, 'files', 'mta.yaml.hbs'),
          project,
          {
              additions: [srv, enterpriseMessaging],
              relationships: [{
                  insert: [enterpriseMessaging, 'name'],
                  into: [srv, 'requires', 'name']
              }]
          }
      )
    }

    if (hasXsuaa) {
      if (hasMta) {
        project['em-service-name'] = YAML.parse(await read('mta.yaml'))?.resources?.find(r => r?.parameters?.service === 'enterprise-messaging')?.name
      } else {
        project['em-service-name'] = `${appName}-messaging`
      }
      await mergeJSON(
        'xs-security.json',
        join(__dirname, 'files', 'xs-security.json.hbs'),
        project,
        {
          additions: [{
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.emcallback' }],
          }, {
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.emmanagement' }],
          }]
        }
      )
    }

    if (hasHelm) {
      //in case facet is being added to the already exisiting charts folder
      let isIndependentCommand = false
      if(Object.keys(context).length == 0){
          isIndependentCommand = true
          context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
      }

      await mergeYAML(join('chart', 'values.yaml'), join(__dirname, 'files', 'values.yaml'))

      // copy service instance chart if it is not present
      const HelmTemplate = require(`../helm`);
      const helmTemplate = new HelmTemplate(this.generator, context.oldTrackingData, context.newTrackingData);
      isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('service-instance');

      // add dependency entry in chart.yaml
      await helmTemplate.addDependency('service-instance', 'event-mesh');

      if(isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
    }
  }
}
