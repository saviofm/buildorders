const { join } = require('path')
const { readProject } = require('../../util/projectReader')
const { mergeJSON, mergeYAML } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5')
const { srvJava4, srvNode4, connectivity } = require('../_merging/registry-mta')

module.exports = class ConnectivityTemplate extends require('../templateBase') {

    static hasFacet(env) {
        return env.requires.connectivity
    }

    async run() {
        const project = await readProject(this.options)
        const { configFile } = project
        await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), project)
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const project = await readProject(this.options)
        const { isJava, srvPath, hasHelm, hasMta } = project

        if (hasMta) {
            const srv = (isJava ? srvJava4 : srvNode4)(srvPath)
            const additions = [srv, connectivity]
            const relationships = [{
                insert: [connectivity, 'name'],
                into: [srv, 'requires', 'name']
            }]
            await mergeYAML('mta.yaml', join(__dirname, 'files', 'mta.yaml.hbs'), project, { additions, relationships })
        }

        if (hasHelm) {
            //in case facet is being added to the already exisiting charts folder
            let isIndependentCommand = false
            if(Object.keys(context).length == 0){
                isIndependentCommand = true
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
            }
            await mergeYAML(
                join('chart', 'values.yaml'),
                join(__dirname, 'files', 'values.yaml.hbs'),
                project,
                { additions: [{
                    in: 'srv.additionalVolumes',
                    where: [{
                        property: 'name',
                        isEqualTo: 'connectivity-secret'
                    }]
                }]}
            )
            const filesPath = join(__dirname, 'files')
            const templatesPath = join('chart', 'templates')
            await copyAndTrack(join(filesPath, 'connectivity-proxy-info.yaml'), join(templatesPath, 'connectivity-proxy-info.yaml'), context)
            if(isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
        }
    }
}
