const { join } = require('path')
const { exists } = require('../../../cds').utils
const { readProject } = require('../../util/projectReader')
const { mergeYAML } = require('../../util/merge')
const { copyAndTrack, parseMd5File, writeMd5File } = require('../../util/md5')
const { DESTINATION } = require('../../constants').OPTIONS

module.exports = class Html5RepoTemplate extends require('../templateBase') {


    getDependencies() {
        return [DESTINATION]
    }

    async canRun() {
        const project = await readProject(this.options)
        const { hasMta, hasHelm } = project
        if (!hasHelm && hasMta) {
            throw `'cds add html5-repo' is not available for Cloud Foundry yet`
        }
        return true
    }

    static hasFacet() {
        // REVISIT: Should be detectable without helm charts
        return exists(join('chart', 'templates', 'html5-apps-deployer-configmap.yaml'))
    }

    async run() {
        await this.runDependentMerging()
    }

    async runDependentMerging(context = {}) {
        const { appName, hasHelm } = await readProject(this.options)

        if (hasHelm) {
            //in case facet is being added to the already exisiting charts folder
            let isIndependentCommand = false
            if(Object.keys(context).length == 0){
                isIndependentCommand = true
                context.oldTrackingData = context.newTrackingData = await parseMd5File(join('chart', '.cds-add-helm-files.md5'))
            }
            await mergeYAML(
                join('chart', 'values.yaml'),
                {
                    'html5-apps-repo-host': {
                        serviceOfferingName: 'html5-apps-repo',
                        servicePlanName: 'app-host'
                    },
                    'html5-apps-deployer': {
                        env: {
                            SAP_CLOUD_SERVICE: null
                        },
                        envFrom: [
                            {
                              configMapRef: {
                                name: "{{ .Release.Name }}-html5-apps-deployer-configmap"
                              }
                            }
                        ],
                        image: {
                            repository: `<your-container-registry>/${appName}-html5-deployer`,
                            tag: 'latest'
                        },
                        bindings: {
                            xsuaa:           { serviceInstanceName: 'xsuaa' },
                            destination:     { serviceInstanceName: 'destination' },
                            'html5-apps-repo': { serviceInstanceName: 'html5-apps-repo-host' }
                        },
                        resources: {
                            limits:   { cpu: '2000m', memory: '1G' },
                            requests: { cpu: '1000m', memory: '1G' }
                        }
                    },
                    backendDestinations: {},
                }
            )

            // copy content deployment chart if it is not present
            const HelmTemplate = require(`../helm`);
            const helmTemplate = new HelmTemplate(this.generator, context.oldTrackingData, context.newTrackingData);
            isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('content-deployment');

            // add dependency entry in chart.yaml
            await helmTemplate.addDependency('content-deployment', 'html5-apps-deployer');

            // copy service-instance chart
            isIndependentCommand = isIndependentCommand | await helmTemplate.addSubChart('service-instance');

            // add dependency entry in chart.yaml
            await helmTemplate.addDependency('service-instance', 'html5-apps-repo-host');

            await copyAndTrack(join(__dirname, 'files', 'html5-apps-deployer-configmap.yaml'), join('chart', 'templates', 'html5-apps-deployer-configmap.yaml'), context)
            if(isIndependentCommand) await writeMd5File(join('chart', '.cds-add-helm-files.md5'), context.newTrackingData)
        }
    }
}
