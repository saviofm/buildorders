
const { MAVEN_ARCHETYPE_VERSION, OPTIONS: { JAVA_MVN, JAVA_PACKAGE, SAMPLES, HANA }, REGEX_JAVA_PACKAGE } = require('../constants');

const { CliError } = require('../../client/helper/errors');


const cp = require('child_process');
const util = require('util');
const execAsync = util.promisify(cp.exec);


const DEFAULT_GROUP_ID = 'customer';

const LOG = console
const cds = require('../../cds')
const DEBUG = cds.debug('cli')


class MvnArchetypeUtil {

    _scanMvnParams(mvnParams, params) {
        // need to create new regex every call since a constant
        // would keep the match state

        const quoteRegex = /([\w\-.]+)=([\w\-.]+|\[([\w.\-,]+)\])/g;
        // captures a=1         => a:1
        //          -Da=[x,y,z] => -Da:x,y,z (Maven specific)
        //          a=[x,y,z]   => a:x,y,z

        let match = quoteRegex.exec(mvnParams);
        while (match != null) {
            const key = (match[1].startsWith('-D') ? match[1] : `-D${match[1]}`);
            params.set(key, match[3] || match[2]);
            match = quoteRegex.exec(mvnParams);
        }
    }

    _finalize(params) {
        // `-DcdsVersion=3.0.0`,
        params.set(`-Dstyle.color`, `always`);

        params.set('-B');

        if (DEBUG) {
            params.set('-X'); params.set('-e');
        }
        if (process.env.CI) {
            params.set('--batch-mode');
        }

        return Array.from(params, ([arg, val]) => val !== null && val !== undefined ? `${arg}=${val}` : arg)
    }

    getAddSamplesCmdArgs(options) {
        const params = new Map();

        params.set(`com.sap.cds:cds-maven-plugin:${MAVEN_ARCHETYPE_VERSION}:addSample`);

        if (options[JAVA_MVN]) {
            this._scanMvnParams(options[JAVA_MVN], params);
        }

        if (options.force) {
            params.set(`-Doverwrite`, true);
        }

        return this._finalize(params);
    }

    getAddTestsCmdArgs(options) {
        const params = new Map();

        params.set(`com.sap.cds:cds-maven-plugin:${MAVEN_ARCHETYPE_VERSION}:addIntegrationTest`);

        if (options[JAVA_MVN]) {
            this._scanMvnParams(options[JAVA_MVN], params);
        }

        if (options.force) {
            params.set(`-Doverwrite`, true);
        }

        return this._finalize(params);
    }

    getAddHanaCmdArgs(options) {
        const params = new Map();

        params.set(`com.sap.cds:cds-maven-plugin:${MAVEN_ARCHETYPE_VERSION}:addTargetPlatform`);
        params.set(`-DtargetPlatform`, `cloudfoundry`);

        if (options[JAVA_MVN]) {
            this._scanMvnParams(options[JAVA_MVN], params);
        }

        return this._finalize(params);
    }

    sanitizePackageName(packageName) {
        return packageName.toLowerCase().replace(/-/g, '_').replace(/\.([0-9])/g, '._$1').replace(/^([0-9])/, '_$1').replace(/\.+/g, '.');
    }

    async getGenerateCmdArgs(projectName, options) {
        const params = new Map();

        // set header
        params.set(`archetype:generate`);
        params.set(`-DarchetypeArtifactId`, `cds-services-archetype`);
        params.set(`-DarchetypeGroupId`, `com.sap.cds`);
        params.set(`-DarchetypeVersion`, MAVEN_ARCHETYPE_VERSION);
        params.set('-DinteractiveMode', false);

        // set defaults, might be changed by java:mvn param
        params.set(`-DartifactId`, projectName);
        params.set(`-DgroupId`, DEFAULT_GROUP_ID);

        const hasHana = !!(options.add && options.add.has(HANA));
        if (hasHana) {
            params.set(`-DtargetPlatform`, `cloudfoundry`);
        }

        const hasSamples = !!(options.add && options.add.has(SAMPLES));
        params.set(`-DincludeModel`, hasSamples);
        params.set(`-DincludeIntegrationTest`, hasSamples);

        if (options[JAVA_MVN]) {
            this._scanMvnParams(options[JAVA_MVN], params);
        }

        // -DjdkVersion=[11|17]
        if (!params.get('-DjdkVersion')) {
            try {
                const javaVersion = await execAsync('java -version');
                const match = javaVersion?.stderr?.match(/version\s*"?(\d+\.\d+\.\d+)"?/);
                if (match?.[1]) {
                    const segments = match[1]?.split('.');
                    const version = new Number(segments?.[0]);
                    switch (true) {
                        case (version < 17):
                            if (process.env.WS_BASE_URL) {
                                throw new CliError(`Java version ${match[1]} is not supported. Use Java 17 or higher. You can use command 'Java: Set Default JDK' to switch to Java 17.`)
                            }
                            throw new CliError(`Java version ${match[1]} is not supported. Use Java 17 or higher.`)
                        case (version < 20): params.set(`-DjdkVersion`, 17); break;
                        case (version >= 20): params.set(`-DjdkVersion`, 20); break;
                        default:
                    }
                }
            } catch (err) {
                if (err instanceof CliError) {
                    throw err;
                }
                DEBUG?.(err);
            }
        }

        if (options[JAVA_PACKAGE]) {
            params.set(`-Dpackage`, options[JAVA_PACKAGE]);
        }

        const artifactId = params.get('-DartifactId');

        const packageFromParam = params.get(`-Dpackage`);
        if (packageFromParam) {
            // explicitly specified, so do not modify
            if (!options.force && !packageFromParam.match(REGEX_JAVA_PACKAGE)) {
                throw `Package '${packageFromParam}' is an invalid Java package name. Use --force to use it anyway.`
            }
        } else {
            // potentially overwritten by mvn param
            const groupId = params.get(`-DgroupId`);
            let packageName = `${groupId}.${projectName}`;

            if (!packageName.match(REGEX_JAVA_PACKAGE)) {
                packageName = this.sanitizePackageName(packageName);
                LOG.warn(`The derived package name '${groupId}.${projectName}' is not a valid Java package name. Using '${packageName}' instead.`);
            }
            params.set(`-Dpackage`, packageName);
        }

        return {
            cmdLine: this._finalize(params),
            archetypeVersion: params.get('-DarchetypeVersion'),
            artifactId
        };
    }
}

module.exports = new MvnArchetypeUtil();
