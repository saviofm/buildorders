#!/usr/bin/env node
/* eslint-disable no-console */

const cds = require('@sap/cds')
const { _import, isfile, local, path } = cds.utils

const isCli = require.main === module
const SUPPORTED = ['subscribe', 'unsubscribe', 'upgrade']

async function cds_mtx(cmd, tenant) {
    if (!cmd) return _usage()
    if (!SUPPORTED.includes(cmd)) return _usage(`Unknown command ${cmd}.`)
    if (!_hasMtEnv()) return _handleError(`cds-mtx ${cmd} operation can only be run inside a multitenant application environment using @sap/cds-mtxs.`)
    if (!tenant) return _handleError(`Please provide a tenant: cds-mtx ${cmd} <tenant>`)
    const { 'cds.xt.DeploymentService':ds } = await cds.serve ([
        '@sap/cds-mtxs/srv/deployment-service',
        '@sap/cds-mtxs/srv/model-provider'
    ])
    await _local_server_js()
    await cds.emit('served')
    if (cmd === 'unsubscribe') {
        await cds.connect.to('db')
    }

    try {
        await ds[cmd](tenant)
    } finally {
        if (cds.db) {
            await cds.db.disconnect(cds.requires.multitenancy.t0)
        }
    }
}

// copied from cds.serve
async function _local_server_js() {
    const _local = file => isfile(file) || isfile (path.join(cds.env.folders.srv,file))
    const cli_js = process.env.CDS_TYPESCRIPT && _local('cli.ts') || _local('cli.js')
    if (cli_js) {
      console.log ('[cds] - loading server from', { file: local(cli_js) })
      await _import(cli_js)
    }
  }

// check for application environment
function _hasMtEnv() {
    if (cds.mtx) {
        console.log('Old @sap/cds-mtx detected')
        return false
    }
    if (cds.requires.multitenancy) {
        return true
    }
    for (const service of ['cds.xt.DeploymentService', 'cds.xt.ModelProviderService']) {
        if (!cds.env.requires[service]) {
            console.log(`Service ${service} not configured`)
            return false
        }
    }
    return true
}

async function _handleError(message) {
    console.log(message)
    if (isCli) {
        process.exit(1)
    }
    throw new Error(message)
}

async function _usage(message = '') {
    return _handleError(message + `
USAGE

   cds-mtx <command> <tenant>

COMMANDS

   subscribe   subscribe a tenant
   unsubscribe unsubscribe a tenant
   upgrade     upgrade a tenant
`
    )
}

if (isCli) {
    const [, , cmd, tenant] = process.argv
    ;(async () => await cds_mtx(cmd, tenant))()
}
module.exports = { cds_mtx }
