const cds = require('@sap/cds/lib')
const Tenants = 'cds.xt.Tenants'
const LOG = cds.log('mtx')

exports.activated = 'Generic metadata'

// Add database-agnostic metadata handlers to DeploymentService...
cds.on ('serving:cds.xt.DeploymentService', ds => {

  const t0 = cds.env.requires.multitenancy?.t0 ?? 't0'
  const { lazyT0 } = cds.env.requires['cds.xt.DeploymentService'] ?? cds.env.requires.multitenancy ?? {}

  ds.before ('*', req => {
    const { tenant } = req?.data ?? {}
    if (tenant) cds.context = { tenant }
  })

  ds.before ('subscribe', req => {
    const { lazyT0 } = cds.env.requires['cds.xt.DeploymentService'] ?? cds.env.requires.multitenancy ?? {}
    if (lazyT0 && req.data.tenant !== cds.env.requires.multitenancy.t0) {
      return _resubscribeT0IfNeeded(req.data.options?._)
    }
  })

  ds.after ('subscribe', async (_, req) => {
    // REVISIT: Use UPSERT instead
    const { tenant, metadata } = req.data
    if (tenant === t0) return
    try {
      await cds.tx({ tenant: t0 }, tx =>
        tx.run(INSERT.into(Tenants, { ID: tenant, metadata: JSON.stringify(metadata) }))
      )
    } catch (e) {
      if (e.message !== 'ENTITY_ALREADY_EXISTS') throw e
    }
    LOG.info(`successfully subscribed tenant ${tenant}`)
  })

  ds.after ('unsubscribe', async (_, req) => {
    const { tenant } = req.data
    if (tenant !== t0) await cds.tx({ tenant: t0 }, tx =>
      tx.run(DELETE.from(Tenants).where({ ID: tenant }))
    )
    LOG.info(`successfully unsubscribed tenant ${tenant}`)
  })

  const { getArtifactCdsPersistenceName } = require('@sap/cds-compiler')

  function _getT0JobsTableName(csn) {
    return cds.requires.db.kind === 'hana' ?
    getArtifactCdsPersistenceName('cds.xt.Jobs', cds.env.sql.names || 'plain', csn, 'hana')
    : 'cds_xt_Jobs'
  }

  // Needs to be exposed for lazyT0 (CALM use case)
  const _resubscribeT0IfNeeded = module.exports.resubscribeT0IfNeeded = async function (params) {
    await cds.connect() // REVISIT: Ideally shouldn't be necessary
    // REVISIT: schema evolution/delta deployment (might be expensive though)
    await ds.tx({ tenant: t0 }, async tx => {
      const csn = await cds.load(`${__dirname}/../../../db/t0.cds`)
      const columns = await tx.getColumns(t0, _getT0JobsTableName(csn), params)
      const needsT0Redeployment = !columns.includes('error') && !columns.includes('ERROR')
      if (!needsT0Redeployment) return

      await tx.subscribe({ tenant: t0, options: { csn, _: params }})
    })
  }
  if (!lazyT0) cds.once('served', () => _resubscribeT0IfNeeded())
})
